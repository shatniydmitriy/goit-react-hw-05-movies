{"version":3,"file":"static/js/164.2928a090.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/modules/MoviesList/moviesList.module.css?be87","modules/MoviesList/MoviesList.jsx","modules/MoviesSearchForm/initialState.js","webpack://react-homework-template/./src/modules/MoviesSearchForm/movieSearchForm.module.css?35a1","modules/MoviesSearchForm/MoviesSearchForm.jsx","pages/MoviesPage/MoviesPage.jsx","shared/styles/services/movieApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"moviesList_moviesList__onaEK\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport css from '../MoviesList/moviesList.module.css';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  const elements = movies.map(({ id, title }) => (\n    <li key={id}>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        {title}\n      </Link>\n    </li>\n  ));\n  return <>{movies && <ul className={css.moviesList}>{elements}</ul>}</>;\n};\nexport default MoviesList;\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};","const initialState = {\n  query: '',\n};\nexport default initialState;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"movieSearchForm_form__dlDqJ\",\"input\":\"movieSearchForm_input__lWzx-\",\"btnSearch\":\"movieSearchForm_btnSearch__9ajoT\"};","import { useState } from 'react';\nimport initialState from './initialState';\nimport PropTypes from 'prop-types';\n\nimport css from '../MoviesSearchForm/movieSearchForm.module.css';\nconst MoviesSearchForm = ({ onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n  const { query } = state;\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input\n        className={css.input}\n        type=\"text\"\n        name=\"query\"\n        value={query}\n        onChange={handleChange}\n        placeholder=\"Search movies\"\n        required\n      />\n      <button className={css.btnSearch} type=\"submit\">\n        Search\n      </button>\n    </form>\n  );\n};\n\nexport default MoviesSearchForm;\n\nMoviesSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport Loader from 'shared/styles/Loader/loader';\n\nimport MoviesSearchForm from 'modules/MoviesSearchForm/MoviesSearchForm';\nimport MoviesList from 'modules/MoviesList/MoviesList';\nimport { getSearchMovie } from 'shared/styles/services/movieApi';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    const fetchSearchMovie = async () => {\n      try {\n        setLoading(true);\n        const data = await getSearchMovie(query);\n        data.length === 0\n          ? Notify.info('There are no movies for your request')\n          : setMovies(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSearchMovie();\n  }, [query]);\n\n  const onSearchMovie = ({ query }) => {\n    if (query.trim() === '') {\n      Notify.info('Enter name movie');\n    }\n    setMovies([]);\n    setSearchParams({ query });\n  };\n\n  return (\n    <>\n      <MoviesSearchForm onSubmit={onSearchMovie} />\n      {movies.length > 0 && <MoviesList movies={movies} />}\n      {error && <p>{error}</p>}\n      {loading && <Loader />}\n    </>\n  );\n};\nexport default MoviesPage;","import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '4a2018560b79424f21a897c5cf387007',\n    language: 'en-US',\n  },\n});\n\nexport const getPopularMovie = async (page = 1) => {\n  const { data } = await instance.get(\n    '/trending/movie/day',\n    {\n      params: {\n        page,\n      },\n    }\n  );\n  return data.results;\n};\n\nexport const getDetailsMovie = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}`);\n  return data;\n};\n\nexport const getSearchMovie = async query => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data.results;\n};\n\nexport const getCastMovie = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data.cast;\n};\n\nexport const getReviewsMovie = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/reviews`);\n  \n  return data.results;\n};"],"names":["MoviesList","movies","location","useLocation","elements","map","id","title","to","state","from","className","css","defaultProps","query","onSubmit","useState","initialState","setState","e","preventDefault","type","name","value","onChange","target","prevState","placeholder","required","setMovies","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchSearchMovie","getSearchMovie","data","length","Notify","message","trim","instance","axios","baseURL","params","api_key","language","getPopularMovie","page","results","getDetailsMovie","movieId","getCastMovie","cast","getReviewsMovie"],"sourceRoot":""}